import java.io.File;
import java.util.Scanner;
import java.io.*;

public class Exam2 {

    public static void importFile(File file) throws Exception {
        Scanner input = new Scanner(file);      //read
        while (input.hasNextLine()) {
            String nextToken = input.nextLine();
            lexSep(String.valueOf(nextToken));  //check on lexemes
        }
    }

    public static void lexSep(String input) {
        String[] separation = input.split("(\\s+|(?=\\p{Punct})|(?<=\\p{Punct}))" +
                "(?=([^\"]*\"[^\"]*\")*[^\"]*$)");
        //splitting by whitespace, punctuation, and " "
        for (int i = 0; i < separation.length; i++) {
            if (separation[i] != "") {
                if ((i + 1 < separation.length) && separation[i].equals(separation[i + 1])) {
                    System.out.println(separation[i] + separation[i + 1] + " - Operator");      //for ++ or --
                    i++;                                                                        //add 1 so the function can skip (i + 1)
                } else if ((i + 1 < separation.length) && separation[i + 1].matches("=") && separation[i].matches("\\p{Punct}")) {
                    System.out.println(separation[i] + separation[i + 1] + " - Operator");      //for !=, ==, -=, +=, *=, /=
                    i++;                                                                        //add 1 so the function can skip (i + 1)
                }
                else {
                    lex(separation[i].trim());              //print out all tokens that arent ++, --, !=, ==, -=, +=, *=, /=
                }                                           //calls on lex function so that the lexeme can be labeled
            }
        }
    }

    //this is part e. check lexical error
    public static void lex(String input) {
        char array[] = input.toCharArray();         //put in a char array. this code is mainly for boolean bool
        boolean bool = Character.isDigit(array[0]); //check on the first digit to see if it's a number
        boolean letter = true;
        if (input.startsWith("\"") && input.endsWith("\"")) {   //check if the input is in " "
            letter = false;
        }
        if (!letter) {           //if input is in " "
            System.out.println(input + " - Content/Input");
        }
        else if (input.matches("for|while|if|else")) {     //keyword and not in " "
            System.out.println(input + " - Keyword");
        }
        else if (input.matches("\\p{Punct}")) {    //punctuations/operations (like + that combines 2 strings)
            System.out.println(input + " - Operation/Punctuation");
        }
        else if (input.matches("[A-Za-z0-9_]+$") && (!bool)) { //identifier (letters, digits, underscores)
            System.out.println(input + " - Identifier");
        }
        else if (input.matches("[0-9]*[A-Za-z_]")) {    //identifier that starts with a number
            System.out.println(input + " - Lexical Error (Identifier can't start with a number)");
            System.exit(0);                             //terminates if error is found
        }
        else if (input.matches("[0-9]+$")) {        //numbers
            System.out.println(input + " - Number");
        }
        else {
            System.out.println(input + " - Error");
            checkE(input);                          
            System.exit(0);                         //terminates if error is found
        }
    }

    //this is part f. check syntax error
    public static void checkE(String input) {
        int count_b = 0;
        int count_p = 0;
        int count_o = 0;
        int count_q = 0;
        for (int i = 0; i < input.length(); i++) {
            if (input.charAt(i) == '"' || input.charAt(i) == '\'') {    //check to see how many " or '
                count_q++;
            }
            if (input.charAt(i) == '[' || input.charAt(i) == ']') {     //check to see how many [ or ]
                count_b++;
            }
            if (input.charAt(i) == '{' || input.charAt(i) == '}') {     //check to see how many { or }
                count_p++;
            }
            if (input.charAt(i) == '(' || input.charAt(i) == ')') {     //check to see how many ( or )
                count_o++;
            }
        }

        //if it's odd, then that means they aren't close since it should be in pairs
        if (count_q % 2 != 0) {
            System.out.println("Syntax Error (quotations aren't close)");
        }

        if (count_b % 2 != 0) {
            System.out.println("Syntax Error (brackets aren't close)");
        }
        if (count_p % 2 != 0) {
            System.out.println("Syntax Error (braces aren't close)");
        }
        if (count_o % 2 != 0) {
            System.out.println("Syntax Error (parentheses aren't close)");
        }
    }

    public static void main(String[] args) throws Exception {
        File file = new File("C:\\Users\\thung\\Downloads\\test1.txt");     //text file
        importFile(file);       //check lexical error
    }
}
